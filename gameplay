<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Moonlight Madness — Fast Food Characters Edition</title>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@600;700&family=Nunito:wght@400;700&display=swap" rel="stylesheet">
<style>
  :root{
    --bg1:#0fb8a6; --bg2:#6b3fa0; --accent:#ffde7d; --muted:#f4f4f6;
    --card-bg: rgba(255,255,255,0.06);
  }
  html,body{height:100%;margin:0;font-family:Nunito,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;}
  body{
    background: linear-gradient(160deg,var(--bg1),var(--bg2));
    color: #fff;
    display:flex;
    align-items:center;
    justify-content:center;
    padding:20px;
  }
  .container{
    width:100%; max-width:1100px; background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(0,0,0,0.05));
    border-radius:14px; box-shadow: 0 10px 30px rgba(0,0,0,0.35);
    overflow:hidden; display:grid; grid-template-columns: 1fr 360px; gap:0;
  }
  .hero{ padding:22px 28px; display:flex; gap:20px; align-items:center; background:linear-gradient(90deg, rgba(0,0,0,0.02), rgba(255,255,255,0.02));}
  .logo{ width:72px;height:72px;border-radius:12px;background:var(--accent); color:#222; display:flex;align-items:center;justify-content:center;font-weight:700;font-family:Montserrat; box-shadow:0 6px 18px rgba(0,0,0,0.25); }
  .title h1{margin:0;font-size:28px;color:var(--muted);letter-spacing:1px}
  .title p{margin:0;font-size:14px;opacity:0.95}
  .main{ padding:22px 28px; display:flex; flex-direction:column; gap:18px; min-height:520px; position:relative;}
  .moon{ position:absolute; right:18px; top:18px; opacity:0.08; transform:scale(1.4); font-size:180px; pointer-events:none; }
  .stars{ position:absolute; left:14px; bottom:14px; opacity:0.06; font-size:80px; }
  .subtitle{font-weight:700;color:var(--accent); font-size:18px;}
  .gamewrap{ display:flex; gap:18px; align-items:flex-start; flex-wrap:wrap; }
  .canvas-card{ background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0.06)); border-radius:12px; padding:12px; flex:1 1 520px; display:flex; flex-direction:column; align-items:center; justify-content:center; }
  canvas{ background: linear-gradient(180deg, rgba(0,0,0,0.06), rgba(255,255,255,0.02)); border-radius:8px; box-shadow: 0 8px 18px rgba(0,0,0,0.35) inset; touch-action:none; }
  .controls{ margin-top:12px; display:flex; gap:8px; align-items:center; justify-content:center; flex-wrap:wrap; }
  .btn{ background:var(--card-bg); border:0;padding:10px 12px;border-radius:10px;color:var(--muted); display:inline-flex; gap:8px; align-items:center; cursor:pointer; transform:translateY(0); transition:transform .12s ease, background .12s; }
  .btn:active{ transform:translateY(2px); }
  .panel{ background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0.03)); padding:18px; border-left:1px solid rgba(255,255,255,0.03); display:flex; flex-direction:column; gap:14px; }
  .promo{ background: linear-gradient(90deg,#ffffff0a,#00000008); padding:12px;border-radius:10px; }
  .promo h3{margin:0; font-size:16px; color:var(--accent); font-weight:700;}
  .meter{ background: linear-gradient(180deg,#ffffff06,#00000006); border-radius:10px;padding:12px; }
  .meter h4{margin:0;color:var(--muted)}
  .score{ font-size:28px; font-weight:700; color:var(--accent); margin-top:6px; }
  .leaderboard{ background:linear-gradient(180deg,#ffffff06,#00000006); padding:12px;border-radius:10px; font-size:14px; }
  input#playerName{ width:100%; padding:8px;border-radius:8px;border:0;background:#ffffff06;color:#fff; }
  @media (max-width:980px){ .container{ grid-template-columns: 1fr;} .panel{ order:3; border-left:0; border-top:1px solid rgba(255,255,255,0.03);} .canvas-card{ flex-basis:100%; } .hero{ padding:18px; gap:12px; } }
</style>
</head>
<body>
  <div class="container" role="application" aria-label="Moonlight Madness interactive site">
    <div>
      <div class="hero">
        <div style="display:flex;gap:14px;align-items:center;">
          <div class="logo" aria-hidden="true">AC</div>
          <div class="title">
            <h1>Moonlight Madness</h1>
            <p>Fast Food Characters Edition — Oct 31 • Halloween Day</p>
          </div>
        </div>
      </div>

      <main class="main">
        <div class="moon">🌙</div>
        <div class="stars">✦ ✦ ✦ ✦</div>

        <div>
          <div class="subtitle">Play the Fast-Food Snake — collect style & win the Style Meter!</div>
          <p style="margin:6px 0 0 0; color:rgba(255,255,255,0.92);">Use arrow keys or the scissors/comb buttons below. On-screen controls for mobile included.</p>
        </div>

        <div class="gamewrap">
          <div class="canvas-card" aria-live="polite">
            <canvas id="gameCanvas" width="520" height="520" role="img" aria-label="Fast food snake game"></canvas>

            <div class="controls" aria-hidden="false">
              <button class="btn" id="btnUp" aria-label="Up (scissors)"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M8 8l8 8M8 16l8-8M14 6a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM6 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" stroke-width="1.4"/></svg>Up</button>
              <button class="btn" id="btnLeft" aria-label="Left (comb)"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M4 7v10M8 7v10M12 7v10M16 7v10M20 7v10" stroke-width="1.4"/></svg>Left</button>
              <button class="btn" id="btnRight" aria-label="Right (comb)"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M4 7v10M8 7v10M12 7v10M16 7v10M20 7v10" stroke-width="1.4"/></svg>Right</button>
              <button class="btn" id="btnDown" aria-label="Down (scissors)"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M8 8l8 8M8 16l8-8M14 6a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM6 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" stroke-width="1.4"/></svg>Down</button>
            </div>

            <div style="margin-top:10px; display:flex; gap:12px; align-items:center; justify-content:center; flex-wrap:wrap;">
              <button id="startBtn" class="btn" aria-pressed="false">Start</button>
              <button id="pauseBtn" class="btn" aria-pressed="false">Pause</button>
              <div style="font-size:14px; color:rgba(255,255,255,0.9);">Score: <span id="score">0</span></div>
            </div>
          </div>

          <aside class="panel" aria-label="Event details and leaderboard">
            <div class="promo">
              <h3>One Day Specials — Oct 31</h3>
              <p><strong>20% OFF Gift Cards</strong></p>
              <p><strong>30% OFF All Products</strong></p>
              <p style="margin:8px 0 0 0;font-size:13px;">Come dressed as Dairy Queen, Wendy, Taco Bell, or the Hamburglar!</p>
            </div>

            <div class="meter" aria-live="polite">
              <h4>Style Meter</h4>
              <div class="score" id="topScore">0</div>
              <div style="font-size:12px; opacity:0.9; margin-top:6px;">Top local score saved in this browser</div>
            </div>

            <div class="leaderboard">
              <h4 style="margin-top:0;">Leaderboard (local)</h4>
              <ol id="leaderList"><li>—</li></ol>
              <div style="margin-top:8px;">
                <input id="playerName" placeholder="Your style name" aria-label="Your style name" />
                <button id="saveScore" class="btn" style="width:100%; margin-top:8px;">Save Score</button>
              </div>
            </div>
          </aside>
        </div>
      </main>
    </div>
  </div>

<script>
/* === Configuration === */
const CELL = 20;                 // px per grid cell
const COLS = 26;                 // grid columns
const ROWS = 26;                 // grid rows
let SPEED = 100;                 // ms between frames (smaller = faster)
const AVATARS = ["🍦","👧","🌮","🕵️"]; // visual avatars
const FOOD_ICON = "🌮";

/* === DOM === */
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d', {alpha:false});
const scoreEl = document.getElementById('score');
const topScoreEl = document.getElementById('topScore');
const leaderList = document.getElementById('leaderList');
const playerName = document.getElementById('playerName');
const startBtn = document.getElementById('startBtn');
const pauseBtn = document.getElementById('pauseBtn');

canvas.width = COLS * CELL;
canvas.height = ROWS * CELL;

/* === Game state === */
let snake = [{x:12,y:12}];
let dir = {x:1,y:0};
let food = {x:5,y:5};
let running = false;
let timer = null;
let score = 0;

/* === Leaderboard (localStorage) === */
const STORAGE_KEY = 'moonlight.leaders.v1';
function loadLeaders(){
  try{
    const raw = localStorage.getItem(STORAGE_KEY);
    if(!raw) return [];
    const parsed = JSON.parse(raw);
    if(!Array.isArray(parsed)) return [];
    return parsed;
  }catch(e){ return []; }
}
function saveLeaders(list){
  localStorage.setItem(STORAGE_KEY, JSON.stringify(list.slice(0,50)));
}
function addLeader(name, sc){
  const list = loadLeaders();
  list.push({name: name || 'Anonymous', score: sc, ts: Date.now()});
  list.sort((a,b) => b.score - a.score || a.ts - b.ts);
  saveLeaders(list);
  renderLeaders();
}
function renderLeaders(){
  const list = loadLeaders();
  leaderList.innerHTML = list.slice(0,6).map(i => `<li>${escapeHtml(i.name)} — ${i.score}</li>`).join('') || '<li>—</li>';
  topScoreEl.textContent = list[0] ? list[0].score : 0;
}
function escapeHtml(s){ return String(s).replace(/[&<>"']/g, k=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[k])); }
renderLeaders();

/* === Utilities === */
function randGrid(){ return { x: Math.floor(Math.random()*COLS), y: Math.floor(Math.random()*ROWS) }; }
function collidedWithSnake(pos){ return snake.some(s => s.x === pos.x && s.y === pos.y); }
function placeFood(){
  let p;
  do { p = randGrid(); } while(collidedWithSnake(p));
  food = p;
}

/* === Drawing helpers === */
function drawRoundedRect(x,y,w,h,r, color){
  ctx.fillStyle = color;
  ctx.beginPath();
  ctx.moveTo(x+r,y);
  ctx.arcTo(x+w,y,x+w,y+h,r);
  ctx.arcTo(x+w,y+h,x,y+h,r);
  ctx.arcTo(x,y+h,x,y,r);
  ctx.arcTo(x,y,x+w,y,r);
  ctx.closePath();
  ctx.fill();
}
function drawBackground(){
  ctx.fillStyle = "#0c2f2b"; // dark base
  ctx.fillRect(0,0,canvas.width,canvas.height);
  // faint stars
  for(let i=0;i<20;i++){
    ctx.fillStyle = `rgba(255,255,255,${0.01 + (i%3)*0.015})`;
    const sx = (i*37) % canvas.width;
    const sy = (i*61) % canvas.height;
    ctx.fillRect(sx, sy, 1, 1);
  }
}
function drawIcon(text, cellX, cellY, size){
  // draw emoji centered
  ctx.font = `${size}px serif`;
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  ctx.fillStyle = "#fff";
  ctx.fillText(text, cellX + CELL/2, cellY + CELL/2 + 1);
}
function render(){
  drawBackground();
  // grid hint lines (subtle)
  ctx.strokeStyle = "rgba(255,255,255,0.02)";
  ctx.lineWidth = 1;
  for(let x=0;x<=canvas.width; x+=CELL){
    ctx.beginPath(); ctx.moveTo(x,0); ctx.lineTo(x,canvas.height); ctx.stroke();
  }
  for(let y=0;y<=canvas.height; y+=CELL){
    ctx.beginPath(); ctx.moveTo(0,y); ctx.lineTo(canvas.width,y); ctx.stroke();
  }

  // draw food
  drawIcon(FOOD_ICON, food.x*CELL, food.y*CELL, CELL*0.9);

  // draw snake - each segment with avatar rotated
  for(let i=0;i<snake.length;i++){
    const seg = snake[i];
    const alpha = 0.06 + (i/snake.length)*0.12;
    drawRoundedRect(seg.x*CELL + 3, seg.y*CELL + 3, CELL-6, CELL-6, 8, `rgba(255,255,255,${alpha})`);
    const avatar = AVATARS[(i + score/10) % AVATARS.length];
    drawIcon(avatar, seg.x*CELL, seg.y*CELL, CELL*0.9);
  }
}

/* === Game core === */
function step(){
  const head = { x: snake[0].x + dir.x, y: snake[0].y + dir.y };

  // wrap
  if (head.x < 0) head.x = COLS-1;
  if (head.x >= COLS) head.x = 0;
  if (head.y < 0) head.y = ROWS-1;
  if (head.y >= ROWS) head.y = 0;

  // hit self?
  if (collidedWithSnake(head)){
    gameOver();
    return;
  }

  snake.unshift(head);

  // eat
  if (head.x === food.x && head.y === food.y){
    score += 10;
    scoreEl.textContent = score;
    placeFood();
    // small speed-up every 50 points
    if(score % 50 === 0 && SPEED > 40){ SPEED = Math.max(40, SPEED - 8); restartInterval(); }
  } else {
    snake.pop();
  }

  render();
}

function startGame(){
  if (running) return;
  running = true;
  score = 0;
  SPEED = 100;
  snake = [{x:12,y:12},{x:11,y:12},{x:10,y:12}];
  dir = {x:1,y:0};
  placeFood();
  scoreEl.textContent = 0;
  startInterval();
  startBtn.setAttribute('aria-pressed','true');
  pauseBtn.setAttribute('aria-pressed','false');
}

function pauseGame(){
  if (!running) return;
  clearInterval(timer);
  timer = null;
  running = false;
  startBtn.setAttribute('aria-pressed','false');
  pauseBtn.setAttribute('aria-pressed','true');
}

function restartInterval(){
  if(timer) { clearInterval(timer); timer = setInterval(step, SPEED); }
}

function startInterval(){
  if(timer) clearInterval(timer);
  timer = setInterval(step, SPEED);
}

/* === Inputs === */
let lastKeyTime = 0;
function setDirection(newDir){
  // prevent reversing directly
  if (newDir.x === -dir.x && newDir.y === -dir.y) return;
  // debounce quick flips
  const t = Date.now();
  if (t - lastKeyTime < 60) return;
  dir = newDir;
  lastKeyTime = t;
}

/* keyboard */
window.addEventListener('keydown', (e) => {
  if (['ArrowUp','ArrowDown','ArrowLeft','ArrowRight'].includes(e.key)){
    e.preventDefault();
  }
  if (e.key === 'ArrowUp') setDirection({x:0,y:-1});
  if (e.key === 'ArrowDown') setDirection({x:0,y:1});
  if (e.key === 'ArrowLeft') setDirection({x:-1,y:0});
  if (e.key === 'ArrowRight') setDirection({x:1,y:0});
  if (e.key === ' '){ // space toggles pause
    running ? pauseGame() : startGame();
  }
});

/* on-screen buttons */
document.getElementById('btnUp').addEventListener('click', ()=> setDirection({x:0,y:-1}));
document.getElementById('btnDown').addEventListener('click', ()=> setDirection({x:0,y:1}));
document.getElementById('btnLeft').addEventListener('click', ()=> setDirection({x:-1,y:0}));
document.getElementById('btnRight').addEventListener('click', ()=> setDirection({x:1,y:0}));

/* start / pause */
startBtn.addEventListener('click', ()=> { if(!running) startGame(); });
pauseBtn.addEventListener('click', ()=> { if(running) pauseGame(); });

/* touch swipe support for mobile controls on canvas */
let touchStart = null;
canvas.addEventListener('touchstart', (ev) => {
  if(ev.touches.length !== 1) return;
  const t = ev.touches[0];
  touchStart = {x:t.clientX, y:t.clientY, time: Date.now()};
});
canvas.addEventListener('touchmove', (ev) => {
  if(!touchStart || ev.touches.length !== 1) return;
  const t = ev.touches[0];
  const dx = t.clientX - touchStart.x;
  const dy = t.clientY - touchStart.y;
  const absX = Math.abs(dx), absY = Math.abs(dy);
  if(Math.max(absX,absY) > 30){
    if(absX > absY){
      setDirection(dx > 0 ? {x:1,y:0} : {x:-1,y:0});
    } else {
      setDirection(dy > 0 ? {x:0,y:1} : {x:0,y:-1});
    }
    touchStart = null;
  }
});
canvas.addEventListener('touchend', ()=> { touchStart = null; });

/* game over */
function gameOver(){
  pauseGame();
  alert("Style Slip! Game over — your score: " + score);
}

/* save score */
document.getElementById('saveScore').addEventListener('click', ()=>{
  const name = playerName.value.trim() || 'Anonymous';
  addLeader(name, score);
});

/* friendly initial render */
render();

/* clean behavior: ensure canvas resizes visually on mobile while preserving internal resolution */
function adjustCanvasCssSize(){
  const maxWidth = Math.min(window.innerWidth - 60, 520);
  canvas.style.width = maxWidth + 'px';
  canvas.style.height = (maxWidth * (canvas.height / canvas.width)) + 'px';
}
window.addEventListener('resize', adjustCanvasCssSize);
adjustCanvasCssSize();

/* Accessibility hint: keyboard control note shown for screen readers */
canvas.setAttribute('tabindex','0');

/* small performance tweak: pause when tab not visible */
document.addEventListener('visibilitychange', () => {
  if(document.hidden) { if(timer) { clearInterval(timer); timer = null; } }
  else if (running && !timer) { timer = setInterval(step, SPEED); }
});

/* keep leaderboard view fresh */
setInterval(renderLeaders, 5000);
</script>
</body>
</html>
